/*

Agenda telef√≥nica - Dificultad:  üü¢üü°üî¥

7- Nos piden realizar una agenda telef√≥nica de contactos.

Un contacto est√° definido por un nombre y un tel√©fono. Se considera que un contacto es igual a otro cuando sus nombres son iguales.

Una agenda de contactos est√° formada por un conjunto de contactos. Se podr√° crear de dos formas, indicando nosotros el tama√±o o con un tama√±o por defecto (10).

Los m√©todos de la agenda ser√°n los siguientes:

agendarContacto(Contacto): A√±ade un contacto a la agenda, sino la agenda no puede almacenar m√°s contactos indicar por pantalla.(YA)

existeContacto(Contacto): indica si el contacto pasado existe o no.(YA)

listarContactos(): Lista toda la agenda (YA)

buscarContacto(nombre): busca un contacto por su nombre y muestra su tel√©fono. (YA)

eliminarContacto(Contacto c): elimina el contacto de la agenda, indica si se ha eliminado o no por pantalla

agendaLlena(): indica si la agenda est√° llena.(YA)

huecosLibres(): indica cu√°ntos contactos m√°s podemos ingresar.(YA)


Crea un men√∫ con opciones que ser√°n seleccionadas por el usuario usando un prompt, las salidas de las operaciones seleccionadas por el usuario se pueden mostrar en pantalla y por consola.

*/

class Contacto {
  #Nombre;
  #Telefono;

  constructor(nombre, telefono) {
    (this.Nombre = nombre), (this.Telefono = telefono);
  }

  get nombre() {
    return this.#Nombre;
  }
  set nombre(value) {
    this.#Nombre = value;
  }

  get telefono() {
    return this.#Telefono;
  }
  set telefono(value) {
    this.#Telefono = value;
  }
}

class agenda {
  constructor() {
    this.Contactos = new Array(10);
  }
  get contactos() {
    return this.Contactos;
  }

  set contactos(contactos) {
    if (contactos.length > 10) {
      document.write("No se pueden ingresar mas de 10 contactos.");
    }
    this.Contactos = contactos;
  }

  listarContactos() {
    this.Contactos.forEach((contacto) => {
      document.write(
        `<p>Nombre: ${contacto.Nombre} telefono: ${contacto.Telefono}</p>`
      );
    });
  }

  existeContacto(nombre) {
    //return this.Contactos.some(c => c && c.Nombre === nombre)
    for (let i = 0; i < this.Contactos.length; i++) {
      const contacto = this.Contactos[i];
      if (contacto && contacto.Nombre === nombre) {
        return true;
      }
    }
    return false;
  }

  agendaLlena() {
    if (this.Contactos.length === 10) {
      document.write("La agenda se encuentra llena");
    } else {
      document.write("La agenda no se encuentra llena");
    }
  }

  huecosLibre() {
    let result = 10 - this.Contactos.length;
    document.write(`Te quedan ${result} lugares`);
  }

  buscarContacto(nombre) {
    for (
     let indiceContacto = 0;
      indiceContacto < this.Contactos.length;
      indiceContacto++
    ) {
      if (this.Contactos[indiceContacto].Nombre === nombre) {
        return this.Contactos[indiceContacto];
      } else {
        return null;
      }
    }
  }

  eliminarContacto(nombre) {
    for (
      let indiceContacto = 0;
      indiceContacto < this.Contactos.length;
      indiceContacto++
    ) {
      if (this.Contactos[indiceContacto].Nombre === nombre) {
        this.Contactos[indiceContacto] = null;
        document.write(`El contacto ${nombre} fue borrado con exito.`);
      } else {
        document.write(`El contacto ${nombre} no se pudo borrar.`);
      }
    }
  }

  agregarContacto(contacto) {
    for (
     let indiceContacto = 0;
      indiceContacto < this.Contactos.length;
      indiceContacto++
    ) {
      if (!this.Contactos[indiceContacto]) {
        if (!(contacto instanceof Contacto)) {
          document.write("Agregar no es un contacto");
          return;
        }
        if (!this.existeContacto(contacto.Nombre)) {
          this.Contactos[indiceContacto] = contacto;
          break;
        } else {
          document.write("El contacto ya existe.");
          break;
        }
      }
    }
  }
}

const miAgenda = new agenda();
let opcion;

do {opcion = prompt("Seleccione una opci√≥n:\n1. Agregar contacto \n 2. Buscar contacto \n 3. Eliminar contacto \n 4. Agenda llena \n 5.Huecos Agendan \n 6.Listar Contactos \n 7.Salir");

  switch (opcion) {
    case "1":
      const nombre = prompt("Ingrese el nombre del contacto:");
      const telefono = prompt("Ingrese el n√∫mero de tel√©fono del contacto:");
      const nuevoContacto = new Contacto(nombre, telefono);
      let indice;

      do {indice = parseInt(prompt("Ingrese la posici√≥n en la que desea agregar el contacto (0-9):"));
         } while (isNaN(indice) || indice < 0 || indice > 9);
      miAgenda.agregarContacto(nuevoContacto, indice);
      
      alert(`Contacto ${nombre} agregado con √©xito en la posici√≥n ${indice}.`);
      break;

    case "2":
      const nombreBuscar = prompt(
        "Ingrese el nombre del contacto que desea buscar:");
      const contactoEncontrado = miAgenda.buscarContacto(nombreBuscar);
      if (contactoEncontrado) {
        alert(`Nombre: ${contactoEncontrado.nombre}\nTel√©fono: ${contactoEncontrado.telefono}`);
      } else {
        alert(`No se encontr√≥ un contacto con el nombre ${nombreBuscar}.`);
      }
      break;

    case "3":
      const nombreEliminar = prompt("Ingrese el nombre del contacto que desea eliminar:");
      const eliminado = miAgenda.eliminarContacto(nombreEliminar);
      if (eliminado) {
        alert(`Contacto ${nombreEliminar} eliminado con √©xito.`);
      } else {
        alert(`No se encontr√≥ un contacto con el nombre ${nombreEliminar}.`);
      }
      break;

    case "4":
      miAgenda.agendaLlena();
      alert('Al salir de le programa te indicara si la agenda se encuentra llena o no.');
      break;
    
     case "5":
     miAgenda.huecosLibre();
     alert(`Te quedan un total de ${result} huecos libres.`);
     break;

     case "6":
      miAgenda.listarContactos();
      alert('Contactos escritos en el docuentos, al salir se listaran los contactos.');
      break;

     case "7":       
       alert("Saliendo de el programa...");
       break;      

    default:
      alert("Opci√≥n inv√°lida. Intente nuevamente.");
  }
} while (opcion !== "7");

