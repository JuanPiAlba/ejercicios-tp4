/*

Agenda telef칩nica - Dificultad:  游릭游리游댮

7- Nos piden realizar una agenda telef칩nica de contactos.

Un contacto est치 definido por un nombre y un tel칠fono. Se considera que un contacto es igual a otro cuando sus nombres son iguales.

Una agenda de contactos est치 formada por un conjunto de contactos. Se podr치 crear de dos formas, indicando nosotros el tama침o o con un tama침o por defecto (10).

Los m칠todos de la agenda ser치n los siguientes:

aniadirContacto(Contacto): A침ade un contacto a la agenda, sino la agenda no puede almacenar m치s contactos indicar por pantalla.
existeContacto(Contacto): indica si el contacto pasado existe o no.
listarContactos(): Lista toda la agenda (YA)
buscarContacto(nombre): busca un contacto por su nombre y muestra su tel칠fono.
eliminarContacto(Contacto c): elimina el contacto de la agenda, indica si se ha eliminado o no por pantalla
agendaLlena(): indica si la agenda est치 llena.
huecosLibres(): indica cu치ntos contactos m치s podemos ingresar.

Crea un men칰 con opciones que ser치n seleccionadas por el usuario usando un prompt, las salidas de las operaciones seleccionadas por el usuario se pueden mostrar en pantalla y por consola.

*/

class Contacto {
  #Nombre;
  #Telefono;

  constructor(nombre, telefono) {
    (this.Nombre = nombre), (this.Telefono = telefono);
  }

  get nombre() {
    return this.#Nombre;
  }
  set nombre(value) {
    this.#Nombre = value;
  }

  get telefono() {
    return this.#Telefono;
  }
  set telefono(value) {
    this.#Telefono = value;
  }
}

class agenda {
  constructor() {
    this.Contactos = new Array(10);
  }
  get contactos() {
    return this.Contactos;
  }

  set contactos(contactos) {
    if (contactos.length > 10) {
      document.write("No se pueden ingresar mas de 10 contactos.");
    }
    this.Contactos = contactos;
  }

  listarContactos() {
    this.Contactos.forEach((contacto) => {
      document.write(
        `<p>Nombre: ${contacto.Nombre} telefono: ${contacto.Telefono}</p>`
      );
    });
  }

  existeContacto(nombre) {
    //return this.Contactos.some(c => c && c.Nombre === nombre)
    for (i = 0; i < this.Contactos.length; i++) {
      const contacto = this.Contactos[i];
      if (contacto && contacto.Nombre === nombre) {
        return true;
      }
    }
    return false;
  }

  agendaLlena() {
    if (this.Contactos.length === 10) {
      document.write("La agenda se encuentra llena");
    } else {
      document.write("La agenda no se encuentra llena");
    }
  }

  huecosLibre() {
    let result = 10 - this.Contactos.length;
    document.write(`Te quedan ${result} lugares`);
  }

  agregarContacto(contacto) {
    for (
      indiceContacto = 0;
      indiceContacto < this.Contactos.length;
      indiceContacto++
    ) {
      if (!this.Contactos[indiceContacto]) {
        if (!(contacto instanceof Contacto)) {
          document.write("Agregar no es un contacto");
          return;
        }
        if (!this.existeContacto(contacto.Nombre)) {
          this.Contactos[indiceContacto] = contacto;
          break;
        } else {
          document.write("El contacto ya existe.");
          break;
        }
      }
    }
  }
}
